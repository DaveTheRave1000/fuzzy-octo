var g=Object.defineProperty;var f=(l,e,t)=>e in l?g(l,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[e]=t;var r=(l,e,t)=>(f(l,typeof e!="symbol"?e+"":e,t),t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const a of i)if(a.type==="childList")for(const n of a.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&s(n)}).observe(document,{childList:!0,subtree:!0});function t(i){const a={};return i.integrity&&(a.integrity=i.integrity),i.referrerPolicy&&(a.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?a.credentials="include":i.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(i){if(i.ep)return;i.ep=!0;const a=t(i);fetch(i.href,a)}})();class v{constructor(){r(this,"getState",()=>({btc:this.btc,reputation:this.reputation,uptimeFormatted:`${Math.floor(this.uptime/60)}m ${Math.floor(this.uptime%60)}s`,cpuUsage:this.cpuUsage||0,riskLevel:this.detectionRisk||0,activeHacks:this.activeHacks.map(e=>({id:e.id,name:e.name,stageIndex:e.stageIndex,stages:e.stages,completed:e.completed,failed:e.failed,stageElapsed:e.stageElapsed,currentStageDuration:e.stages[e.stageIndex]?e.stages[e.stageIndex].duration:e.stages[e.stages.length-1].duration,currentStageName:e.stages[e.stageIndex]?e.stages[e.stageIndex].name:e.completed?"DONE":"â€”"})),availableTargets:this.availableTargets,availableUpgrades:Object.values(this.upgrades).map(e=>({id:e.id,name:e.name,level:e.level,cost:this.getUpgradeCost(e),description:this.getUpgradeDescription(e.id)})),networkStatus:{connections:this.connections||0,bandwidth:100,encryption:`AES-256 L${this.upgrades.encryption.level}`,detectionRisk:this.detectionRisk||0},isPaused:this.isPaused,isActive:this.isGameStarted&&!this.isPaused&&!this.isGameOver,isGameOver:this.isGameOver,totalBtc:this.totalBtcEarned||this.btc,successfulHacks:this.successfulHacks||0,failedHacks:this.failedHacks||0,detectionRate:this.detectionRisk||0,maxReputation:this.maxReputation||this.reputation,research:{points:this.research.points,available:this.research.available.map(e=>({id:e.id,name:e.name,cost:e.cost,level:e.level})),active:this.research.activeProjects},activityFeed:this.activityFeed?this.activityFeed.slice(-20):[],maxConcurrentHacks:this.getMaxConcurrentHacks?this.getMaxConcurrentHacks():this.cpuPower}));r(this,"getMaxConcurrentHacks",()=>this.cpuPower);r(this,"initializeGame",()=>{this.btc=.1,this.reputation=0,this.cpuPower=1,this.isGameStarted=!1,this.isGameOver=!1,this.uptime=0,this.upgrades={bruteforce:{id:"bruteforce",name:"Bruteforce",level:1,baseCost:.01},encryption:{id:"encryption",name:"Encryption Suite",level:1,baseCost:.02},mining:{id:"mining",name:"Mining Rig",level:1,baseCost:.015},cpu:{id:"cpu",name:"CPU Core",level:1,baseCost:.05}},this.activeHacks=[],this.availableTargets=[],this.connections=1,this.securityLevel=1,this.detectionRisk=0,this.networkNodes=[],this.successfulHacks=0,this.failedHacks=0,this.totalBtcEarned=0,this.maxReputation=0,this.software={bruteforce:{level:1,power:1},encryption:{level:1,power:1},antivirus:{level:1,power:1},mining:{level:1,power:1}},this.uptime=0,this.lastUpdate=Date.now(),this.isPaused=!0,this.cpuUsage=0,this.detectionRisk=0,this.hype=0,this.isRunning=!1,this.project=null,this.isGameStarted=!1,this.isGameOver=!1,this.devTime=0,this.bugs=0,this.devPhase="Planning",this.taskProgress={},this.gameTime=1,this.reputation=0,this.followers=0,this.lastUpdate=Date.now(),this.isPaused=!0,this.dayLength=20,this.timeScale=1,this.staffCost=2e3,this.research={points:0,passiveRate:.01,activeProjects:[],available:[{id:"res-speed",name:"Optimized Algorithms",cost:10,effect:{bruteSpeed:.1},level:0},{id:"res-risk",name:"Stealth Protocols",cost:15,effect:{riskMitigation:.05},level:0},{id:"res-mining",name:"Quantum Mining",cost:20,effect:{miningBoost:.25},level:0},{id:"res-cpu",name:"Parallel Processing",cost:25,effect:{cpuCore:1},level:0}]},this.prestigeLevel=0,this.prestigePoints=0,this.achievements={definitions:[{id:"btc-1",name:"First Milli",condition:e=>e.totalBtcEarned>=.001,bonus:e=>{e.reputation+=1}},{id:"btc-01",name:"Stack Builder",condition:e=>e.totalBtcEarned>=.01,bonus:e=>{e.research.passiveRate+=.002}},{id:"hack-10",name:"Script Kiddie",condition:e=>e.successfulHacks>=10,bonus:e=>{e.software.bruteforce.power+=.1}},{id:"hack-100",name:"Operator",condition:e=>e.successfulHacks>=100,bonus:e=>{e.cpuPower+=1}},{id:"risk-0",name:"Ghost",condition:e=>e.detectionRisk<5&&e.uptime>300,bonus:e=>{e.upgrades.encryption.level+=1}}],unlocked:new Set},this.startGameLoop()});r(this,"startGame",()=>(this.isGameStarted=!0,this.isPaused=!1,this.lastUpdate=Date.now(),this.availableTargets.length===0&&this.generateNewTargets(),"Game started!"));r(this,"checkGameOver",()=>!!this.isGameOver);r(this,"startHack",e=>{if(this.activeHacks.length>=this.getMaxConcurrentHacks())return`ERROR: CPU capacity reached (${this.activeHacks.length}/${this.getMaxConcurrentHacks()}). Upgrade CPU or wait.`;const t=this.availableTargets.find(s=>s.id===e);return t?typeof t.cost=="number"&&this.btc<t.cost?`ERROR: Need ${t.cost.toFixed(5)} BTC to initiate.`:(typeof t.cost=="number"&&(this.btc-=t.cost),this.activeHacks.push({id:t.id,name:t.name,reward:t.reward,difficulty:t.difficulty,stages:t.stages,stageIndex:0,stageElapsed:0,completed:!1,failed:!1}),this.availableTargets=this.availableTargets.filter(s=>s.id!==e),this.generateNewTargets(),this.updateCPUUsage(),this.addEvent(`[START] ${t.name}${t.cost?` (-${t.cost.toFixed(5)} BTC)`:""}`),`> Hack initiated on ${t.name}`):"ERROR: Invalid target"});r(this,"updateHacks",e=>{this.activeHacks.forEach(t=>{if(t.completed||t.failed)return;const s=t.stages[t.stageIndex];if(t.stageElapsed+=e*(this.software.bruteforce.power+(this.upgrades.bruteforce.level-1)*.25),Math.random()<this.detectionRisk/1e5&&(t.failed=!0,this.failedHacks+=1,this.detectionRisk=Math.min(100,this.detectionRisk+3),this.addEvent(`[FAIL] ${t.name} (${s.name})`)),!t.failed&&t.stageElapsed>=s.duration)if(t.stageIndex++,t.stageElapsed=0,t.stageIndex>=t.stages.length){t.completed=!0;const i=t.reward;this.btc+=i,this.totalBtcEarned+=i,this.reputation+=Math.floor(t.difficulty*5),this.successfulHacks+=1,this.detectionRisk=Math.max(0,this.detectionRisk-5),this.addEvent(`[COMPLETE] ${t.name} +${i.toFixed(4)} BTC`)}else this.addEvent(`[STAGE] ${t.name} -> ${t.stages[t.stageIndex].name}`);else if(!t.failed){const i=1-this.upgrades.encryption.level*.05;this.detectionRisk+=t.difficulty*.015*e*i}}),this.activeHacks=this.activeHacks.filter(t=>!t.completed&&!t.failed),this.updateCPUUsage()});r(this,"updateMining",e=>{const t=this.getMiningRate()*e;this.btc+=t,this.totalBtcEarned+=t});r(this,"onNewDay",()=>{const e=this.calculateDailyOperatingCosts();return this.spendBTC(e),this.generateNewTargets(),this.updateSecurityMeasures(),{type:"daily",message:`[SYSTEM] Daily Report:
        Operating Costs: ${e.toFixed(8)} BTC
        Active Connections: ${this.connections}
        Security Level: ${this.securityLevel}
        Detection Risk: ${this.detectionRisk}%`}});r(this,"calculateDailyOperatingCosts",()=>{let e=.001;return e+=this.connections*1e-4,e+=this.activeHacks.length*2e-4,e+=this.securityLevel*5e-4,e});r(this,"generateNewTargets",()=>{const e=3-this.availableTargets.length;e>0&&(this.availableTargets=this.availableTargets.concat(this.generateRandomTargets(e)))});r(this,"updateSecurityMeasures",()=>{this.detectionRisk=Math.min(100,this.detectionRisk+this.activeHacks.length*2-this.securityLevel*.5),this.detectionRisk>80&&this.log({type:"warning",message:"[WARNING] High detection risk! Consider reducing activity."})});r(this,"getPhaseMultiplier",()=>{switch(this.devPhase){case"Planning":return .7;case"Development":return 1.2;case"Testing":return .8;case"Polishing":return .5;default:return 1}});r(this,"updateTaskProgress",e=>{if(!this.project)return;const t=this.devPhase.toLowerCase();this.taskProgress[t]||(this.taskProgress[t]={tasks:[{name:"Documentation",progress:0},{name:"Implementation",progress:0},{name:"Quality Checks",progress:0}]}),this.taskProgress[t].tasks.forEach(s=>{s.progress<1&&(s.progress=Math.min(1,s.progress+.01*e*this.staff))})});r(this,"updateDevPhase",()=>{const e=this.project.progress;e<.25?this.devPhase="Planning":e<.5?this.devPhase="Development":e<.75?this.devPhase="Testing":this.devPhase="Polishing"});r(this,"canAfford",e=>this.money>=e);r(this,"spendMoney",e=>this.canAfford(e)?(this.money-=e,!0):!1);r(this,"earnMoney",e=>{this.money+=e});r(this,"setProject",e=>{this.project=e,this.money=e.budget,this.hype=Math.max(this.hype,e.hype),this.isRunning=!0});r(this,"completeProject",()=>{const e=this.calculateEarnings();return this.earnMoney(e),this.staff>0&&(this.hype+=Math.floor(this.staff*1.5)),this.project=null,this.isRunning=!1,e});r(this,"calculateEarnings",()=>{if(!this.project)return 0;let e=this.project.budget;return e+=Math.pow(this.hype,1.5)*100,this.staff>=this.project.staff?(e*=1.5,this.staff>this.project.staff&&(e*=1+(this.staff-this.project.staff)*.1)):e*=.5+this.staff/this.project.staff*.5,Math.floor(e)});r(this,"getProjectStatus",()=>({money:this.money,staff:this.staff,hype:this.hype,progress:this.project?Math.floor(this.project.progress*100):0,milestone:this.project?`${this.project.currentMilestone}/${this.project.milestones}`:"-",isRunning:this.isRunning,devTime:Math.floor(this.devTime),bugs:this.bugs,devPhase:this.devPhase,gameTime:Math.floor(this.gameTime),reputation:this.reputation,followers:this.followers}));r(this,"spendBTC",e=>this.btc>=e?(this.btc-=e,!0):!1);this.initializeGame(),this.recentEvents=[],this.activityFeed=[],this.riskNotified60=!1,this.riskNotified80=!1,this.riskTipShown80=!1,this.lastRiskTraceCheck=0,this.traceEventActive=!1,this.traceEventTimer=0,this.traceEventAnswer=null,this.graceActive=!1,this.graceTimer=0}getMiningRate(){const t=Math.pow(2,this.upgrades.mining.level-1),s=this.software.mining.power||1;return 5e-5*t*s}updateCPUUsage(){const e=this.activeHacks.filter(t=>!t.completed).length;this.cpuUsage=Math.min(100,e/this.cpuPower*100)}processRandomEvents(e){if(Math.random()<e*.1){const t=this.generateRandomEvent();this.processEvent(t)}}generateRandomEvent(){const e=[{type:"security_scan",risk:20,message:"WARNING: Security scan detected!"},{type:"vulnerability",reward:.05,message:"Vulnerability discovered: +0.05 BTC"},{type:"network_glitch",cpuImpact:-10,message:"Network glitch: CPU performance degraded"}];return e[Math.floor(Math.random()*e.length)]}processEvent(e){switch(e.type){case"security_scan":this.detectionRisk+=e.risk;break;case"vulnerability":this.btc+=e.reward;break;case"network_glitch":this.cpuUsage=Math.max(0,this.cpuUsage+e.cpuImpact);break}return e.message}restartGame(){return this.initializeGame(),"Game restarted. Starting funds: $10,000"}togglePause(){return!this.isGameStarted||this.isGameOver?!1:(this.isPaused=!this.isPaused,this.isPaused||(this.lastUpdate=Date.now()),this.isPaused)}setTimeScale(e){this.timeScale=e}startProject(e){const t={indie:{budget:5e3,staff:2,hype:5,milestones:3},rpg:{budget:15e3,staff:5,hype:10,milestones:5},shooter:{budget:1e4,staff:3,hype:8,milestones:4}},s=t[e]||t.indie;return this.project={type:e,budget:s.budget,requiredStaff:s.staff,hype:s.hype,progress:0,currentMilestone:1,milestones:s.milestones},this.isRunning=!0,this.devTime=0,this.bugs=0,this.devPhase="Planning",this.taskProgress={},`Started new ${e} project`}generateRandomTargets(e){const t=1+this.uptime/600+this.prestigeLevel*.1,s=[{type:"server",rewardRange:[.001,.01],difficultyRange:[1,3]},{type:"database",rewardRange:[.01,.05],difficultyRange:[2,4]},{type:"network",rewardRange:[.05,.2],difficultyRange:[3,5]},{type:"crypto",rewardRange:[.2,1],difficultyRange:[4,6]}];return Array.from({length:e},()=>{const i=s[Math.floor(Math.random()*s.length)],a=Math.floor((Math.random()*(i.difficultyRange[1]-i.difficultyRange[0]+1)+i.difficultyRange[0])*t),n=i.rewardRange[0]+Math.random()*(i.rewardRange[1]-i.rewardRange[0]),o=a*6+Math.random()*a*4;let c=n*(.25+a*.015);return c=Math.min(c,n*.6),c=+c.toFixed(5),{id:Math.random().toString(36).slice(2,11),name:this.generateTargetName(i.type),difficulty:a,reward:n,cost:c,stages:[{name:"SCAN",duration:o*.25},{name:"BREACH",duration:o*.45},{name:"EXFIL",duration:o*.3}]}})}generateTargetName(e){const t=["Hidden","Secure","Private","Corporate","Global"],s=["Hub","Core","Net","Base","Cloud"],i=t[Math.floor(Math.random()*t.length)],a=s[Math.floor(Math.random()*s.length)];return`${i}-${a}`}startGameLoop(){this.gameLoop=setInterval(()=>{this.isPaused||this.update()},50)}update(){if(!this.isGameStarted||this.isPaused||this.isGameOver){this.lastUpdate=Date.now();return}const e=Date.now(),t=(e-this.lastUpdate)/1e3;this.lastUpdate=e,this.uptime+=t,this.research.points+=this.research.passiveRate*t;const s=(.01+this.upgrades.encryption.level*.005)*t;this.detectionRisk=Math.max(0,this.detectionRisk-s),this.updateHacks(t),this.updateMining(t),this.processRandomEvents(t),this.evaluateRisk(t),this.checkAchievements(),this.checkGameOver();const i=Math.floor(this.uptime/86400),a=Math.floor((this.uptime-t)/86400);if(i>a&&this.onNewDay(),this.isRunning&&this.project){this.devTime+=t;const c=.01*(1+this.staff*.5),d=this.getPhaseMultiplier(),u=c*d;if(this.project.progress=Math.min(1,this.project.progress+u*t),this.updateTaskProgress(t),Math.random()<(.05+this.staff*.01)*t){const h=Math.floor(Math.random()*this.staff)+1;return this.bugs+=h,`Found ${h} new bug${h>1?"s":""}!`}if(this.updateDevPhase())return`Development phase changed to: ${this.devPhase}`;if(this.project.progress>=1)return this.completeProject()}const n=Math.floor(this.uptime/86400),o=Math.floor((this.uptime-t)/86400);if(n>o&&Math.random()<.3+this.reputation*.01){const c=Math.floor(Math.random()*this.reputation+1);return this.followers+=c,`Gained ${c} new followers!`}this.tickPostSystems(t)}getUpgradeCost(e){return+(e.baseCost*Math.pow(1.8,e.level-1)).toFixed(5)}getUpgradeDescription(e){switch(e){case"bruteforce":return"Speed +25% per level";case"encryption":return"Risk gain -5% per level";case"mining":return"Mining +100% per level";case"cpu":return"Adds +1 concurrent hack";default:return""}}canAffordUpgrade(e){const t=this.upgrades[e];return t?this.btc>=this.getUpgradeCost(t):!1}purchaseUpgrade(e){const t=this.upgrades[e];if(!t)return{success:!1,message:"Invalid upgrade"};const s=this.getUpgradeCost(t);return this.btc<s?(this.addEvent(`[UPGRADE FAIL] ${(t==null?void 0:t.name)||e} (insufficient BTC)`),{success:!1,message:"Insufficient BTC"}):(this.btc-=s,t.level++,e==="cpu"&&this.cpuPower++,e==="mining"&&(this.software.mining.power+=1),e==="bruteforce"&&(this.software.bruteforce.power+=.25),this.addEvent(`[UPGRADE] ${t.name} L${t.level}`),{success:!0,message:`[UPGRADE] ${t.name} L${t.level}`})}purchaseResearch(e){const t=this.research.available.find(s=>s.id===e);return t?this.research.points<t.cost?(this.addEvent(`[RESEARCH FAIL] ${(t==null?void 0:t.name)||e} need ${t.cost} RP`),{success:!1,message:"Insufficient research points"}):(this.research.points-=t.cost,t.level++,t.effect.bruteSpeed&&(this.software.bruteforce.power+=t.effect.bruteSpeed),t.effect.riskMitigation&&(this.research.passiveRate+=.002),t.effect.miningBoost&&(this.software.mining.power+=t.effect.miningBoost),t.effect.cpuCore&&(this.cpuPower+=t.effect.cpuCore),t.cost=Math.ceil(t.cost*1.75),this.addEvent(`[RESEARCH] ${t.name} L${t.level}`),{success:!0,message:`Research upgraded: ${t.name}`}):{success:!1,message:"Invalid research"}}checkAchievements(){this.achievements.definitions.forEach(e=>{!this.achievements.unlocked.has(e.id)&&e.condition(this)&&(this.achievements.unlocked.add(e.id),e.bonus(this),this.addEvent(`[ACHIEVEMENT] ${e.name}`))})}addEvent(e){this.recentEvents.push(e),this.activityFeed.push({msg:e,t:Date.now()}),this.activityFeed.length>100&&this.activityFeed.splice(0,this.activityFeed.length-100)}evaluateRisk(e){const t=this.detectionRisk;if(t>=60&&!this.riskNotified60&&(this.addEvent("[RISK] Elevated network scrutiny detected."),this.riskNotified60=!0),t>=80&&!this.riskNotified80&&(this.addEvent("[RISK] CRITICAL: Active tracing suspected!"),this.riskNotified80=!0),t>=80&&!this.riskTipShown80&&(this.riskTipShown80=!0,this.addEvent("[TIP] Reduce risk: Finish current hacks (completion drops risk), pause starting new ones, upgrade Encryption, invest in Stealth research, or wait.")),t<60&&(this.riskNotified60=!1),t<80&&(this.riskNotified80=!1),t<70&&(this.riskTipShown80=!1),t>=100&&!this.isGameOver){if(this.lastRiskTraceCheck+=e,this.lastRiskTraceCheck>=1){this.lastRiskTraceCheck=0;const s=t-100,i=.05,a=.005,o=this.upgrades.encryption.level*.03*.5;let c=i+s*a-o;c=Math.min(.85,Math.max(.02,c)),Math.random()<c?!this.traceEventActive&&!this.graceActive?this.launchTraceEvent():this.graceActive&&this.triggerGameOver():this.addEvent(`[TRACE] Sweep evaded (risk ${t.toFixed(1)} / overflow ${s}).`)}}else this.lastRiskTraceCheck=0}launchTraceEvent(){this.traceEventActive=!0,this.traceEventTimer=25;const e=["PURGE LOGS","ROTATE KEYS","FLOOD NOISE"];this.traceEventAnswer=e[Math.floor(Math.random()*e.length)],this.addEvent("[TRACE] Active trace detected! Execute countermeasure!")}resolveTraceOption(e){if(!this.traceEventActive)return{resolved:!1};const t=e===this.traceEventAnswer;return t?(this.addEvent("[TRACE] Countermeasure successful. Entering GRACE window."),this.activateGraceWindow()):(this.addEvent("[TRACE] Countermeasure failed. Trace tightening."),this.triggerGameOver()),this.traceEventActive=!1,{resolved:!0,success:t}}activateGraceWindow(){this.graceActive=!0,this.graceTimer=10,this.detectionRisk=Math.min(this.detectionRisk,85)}update(e){if(!this.isGameStarted||this.isPaused||this.isGameOver){this.lastUpdate=Date.now();return}const t=Date.now(),s=(t-this.lastUpdate)/1e3;this.lastUpdate=t,this.uptime+=s,this.research.points+=this.research.passiveRate*s;const i=(.01+this.upgrades.encryption.level*.005)*s;this.detectionRisk=Math.max(0,this.detectionRisk-i),this.updateHacks(s),this.updateMining(s),this.processRandomEvents(s),this.evaluateRisk(s),this.checkAchievements(),this.checkGameOver();const a=Math.floor(this.uptime/86400),n=Math.floor((this.uptime-s)/86400);if(a>n&&this.onNewDay(),this.isRunning&&this.project){this.devTime+=s;const d=.01*(1+this.staff*.5),u=this.getPhaseMultiplier(),m=d*u;if(this.project.progress=Math.min(1,this.project.progress+m*s),this.updateTaskProgress(s),Math.random()<(.05+this.staff*.01)*s){const p=Math.floor(Math.random()*this.staff)+1;return this.bugs+=p,`Found ${p} new bug${p>1?"s":""}!`}if(this.updateDevPhase())return`Development phase changed to: ${this.devPhase}`;if(this.project.progress>=1)return this.completeProject()}const o=Math.floor(this.uptime/86400),c=Math.floor((this.uptime-s)/86400);if(o>c&&Math.random()<.3+this.reputation*.01){const d=Math.floor(Math.random()*this.reputation+1);return this.followers+=d,`Gained ${d} new followers!`}this.tickPostSystems(s)}tickPostSystems(e){this.traceEventActive&&(this.traceEventTimer-=e,this.traceEventTimer<=0&&(this.addEvent("[TRACE] No response. Trace lock achieved."),this.traceEventActive=!1,this.triggerGameOver())),this.graceActive&&(this.graceTimer-=e,this.graceTimer<=0&&(this.detectionRisk>=80?(this.addEvent("[GRACE] Risk still critical after grace window."),this.triggerGameOver()):this.addEvent("[GRACE] Trace window cleared. Resuming operations."),this.graceActive=!1))}triggerGameOver(){this.isGameOver||(this.isGameOver=!0,this.isPaused=!0,this.addEvent("[SYSTEM] SESSION TERMINATED. You were traced."))}}class E{constructor(e){r(this,"startUpdateLoop",()=>{setInterval(()=>{this.update(),this.updateCodeStream(),this.updateAnalytics()},300)});r(this,"onTraceClick",e=>{const t=e.target.closest(".trace-btn");if(!t)return;const s=t.dataset.traceOpt;this.game.resolveTraceOption(s).resolved&&this.updateTraceUI()});this.game=e,this.elements={money:document.getElementById("btc"),reputation:document.getElementById("reputation"),uptime:document.getElementById("uptime"),cpuUsage:document.getElementById("cpu-usage"),log:document.getElementById("log"),pauseBtn:document.getElementById("pause-btn"),startGameBtn:document.getElementById("start-game-btn"),restartGameBtn:document.getElementById("restart-game-btn"),hackTargets:document.getElementById("hack-targets"),activeHacksList:document.getElementById("active-hacks-list"),cpuBar:document.getElementById("cpu-bar"),riskBar:document.getElementById("risk-bar"),networkStatus:document.getElementById("network-status"),codeStream:document.getElementById("network-stream"),researchList:document.getElementById("research-list"),researchProjects:document.getElementById("research-projects"),researchPoints:document.getElementById("research-points"),upgradesList:document.getElementById("upgrades-list"),analytics:{completed:document.getElementById("stat-completed-hacks"),failed:document.getElementById("stat-failed-hacks"),btcPerMin:document.getElementById("stat-btc-per-min"),risk:document.getElementById("stat-risk"),activityList:document.getElementById("activity-list")},panels:{hack:document.getElementById("panel-hack"),network:document.getElementById("panel-network"),software:document.getElementById("panel-software"),darknet:document.getElementById("panel-darknet"),staff:document.getElementById("panel-staff"),progress:document.getElementById("panel-progress"),help:document.getElementById("panel-help")},resourceStats:document.getElementById("resource-stats")},this.lastUpgradesSig="",this.lastResearchSig="",this.clickCooldowns={upgrade:0,research:0},this.traceOverlay=document.getElementById("trace-overlay"),this.graceBanner=null,this.injectedTrace=!1,this.initializeEventListeners(),this.showPanel("hack"),this.startUpdateLoop(),this.updateTraceUI()}initializeEventListeners(){this.elements.startGameBtn&&this.elements.startGameBtn.addEventListener("click",()=>{this.game.startGame();const e=document.getElementById("start-game-modal");e&&(e.classList.remove("active"),e.style.display="none"),this.log("[SYSTEM] Initializing hack.net terminal...","system"),this.log("[SYSTEM] Connection established","system"),this.log("[SYSTEM] Welcome to the darknet","system")}),this.elements.restartGameBtn&&this.elements.restartGameBtn.addEventListener("click",()=>{this.game.restartGame(),this.log("[SYSTEM] System reset initiated...","system"),this.log("[SYSTEM] All connections terminated","system"),this.log("[SYSTEM] Restarting terminal...","system")}),this.elements.pauseBtn&&this.elements.pauseBtn.addEventListener("click",()=>{const e=this.game.togglePause();this.elements.pauseBtn.textContent=e?"[RESUME]":"[PAUSE]",this.log(e?"[SYSTEM] System paused":"[SYSTEM] System resumed","system")}),this.setupHackButtons(),this.setupUpgradeButtons(),this.setupNetworkButtons(),this.initializePanels()}setupPanelButtons(){document.querySelectorAll(".panel-btn").forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.panel;t&&this.showPanel(t)})})}setupPauseButton(){this.elements.pauseBtn&&this.elements.pauseBtn.addEventListener("click",()=>{const e=this.game.togglePause();this.elements.pauseBtn.classList.toggle("paused",e);const t=this.elements.pauseBtn.querySelector(".button-text");t&&(t.textContent=e?"[RESUME]":"[PAUSE]"),this.log(e?"Game Paused":"Game Resumed")})}setupProjectButton(){this.elements.startBtn&&this.elements.startBtn.addEventListener("click",()=>{var e;if(this.game.isPaused)this.log("Cannot start project while game is paused");else{const t=((e=this.elements.projectSelect)==null?void 0:e.value)||"indie",s=this.game.startProject(t);this.log(s),this.update()}})}setupStaffButton(){const e=document.getElementById("hire");e&&e.addEventListener("click",()=>{!this.game.isPaused&&this.game.canAfford(2e3)&&(this.game.staff++,this.game.spendMoney(2e3),this.log("Hired new staff member"),this.update())})}setupHackButtons(){this.elements.hackTargets&&this.elements.hackTargets.addEventListener("click",e=>{const t=e.target.closest(".hack-btn");if(!t||this.game.isPaused)return;const s=t.dataset.targetId;if(!s)return;const i=this.game.startHack(s);this.log(i,"system"),this.update()})}setupUpgradeButtons(){this.elements.upgradesList&&this.elements.upgradesList.addEventListener("click",e=>{const t=e.target.closest(".upgrade-btn");if(!t||this.game.isPaused)return;const s=performance.now();if(s-this.clickCooldowns.upgrade<120)return;this.clickCooldowns.upgrade=s;const i=t.dataset.upgradeId;if(!i)return;const a=parseFloat(t.dataset.cost||"0");if(this.game.btc<a){this.log(`[UPGRADE] Need ${a.toFixed(5)} BTC`,"warning");return}const n=this.game.purchaseUpgrade(i);this.log(n.message,n.success?"success":"warning"),setTimeout(()=>{this.lastUpgradesSig="",this.updateUpgrades(this.game.getState().availableUpgrades)},50)})}updateUpgrades(e){if(!this.elements.upgradesList)return;const t=e.map(s=>`${s.id}:${s.level}:${s.cost}`).join("|");t!==this.lastUpgradesSig&&(this.lastUpgradesSig=t,this.elements.upgradesList.innerHTML="",e.forEach(s=>{const i=this.game.btc>=s.cost,a=document.createElement("div");a.classList.add("software-item"),a.innerHTML=`
        <div class="software-header"><span class="name">${s.name}</span><span class="level">L${s.level}</span></div>
        <div class="software-stats"><div class="power">Cost: ${s.cost} BTC</div></div>
        <div class="software-stats"><div class="power">${s.description}</div></div>
        <button class="crt-button upgrade-btn ${i?"":"disabled"}" data-upgrade-id="${s.id}" data-cost="${s.cost}">UPGRADE</button>
      `,this.elements.upgradesList.appendChild(a)}))}setupNetworkButtons(){document.querySelectorAll(".network-action").forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.actionId;if(!this.game.isPaused){const s=this.game.executeNetworkAction(t);this.log(s.message),this.update()}})})}initializePanels(){document.querySelectorAll(".panel-btn").forEach(e=>{e.addEventListener("click",()=>{const t=e.getAttribute("data-panel");t&&this.showPanel(t)})})}showPanel(e){const t=this.elements.panels[e];if(!t){console.error(`Invalid panel name: ${e}`);return}const s=document.querySelector(".panels-container");s&&(s.style.marginLeft="0"),Object.values(this.elements.panels).forEach(i=>{i&&i.classList.remove("active")}),t.classList.add("active"),document.querySelectorAll(".panel-btn").forEach(i=>{const a=i.getAttribute("data-panel");i.classList.toggle("active",a===e)})}updateProgressBar(e,t){if(e){const s=Math.min(Math.max(t,0),100);e.style.width=`${s}%`,e.classList.toggle("warning",s>=70),e.classList.toggle("danger",s>=90)}}updateActiveHacks(e){this.elements.activeHacksList&&(this.elements.activeHacksList.innerHTML="",e.forEach(t=>{const s=t.stages?t.stages.length:1,i=t.stageIndex||0,a=t.stages&&t.stages[i];let n=0;a&&t.currentStageDuration?n=Math.min(100,t.stageElapsed/t.currentStageDuration*100):t.completed&&(n=100);const o=t.failed?'<span class="hack-status fail">FAILED</span>':t.completed?'<span class="hack-status done">COMPLETE</span>':`<span class="hack-status stage">${t.currentStageName||(a?a.name:"")}</span>`,c=["hack-progress-fill"];t.failed?c.push("failed"):t.completed?c.push("complete"):n>80?c.push("high"):n>50&&c.push("mid");const d=document.createElement("div");d.classList.add("active-hack"),d.innerHTML=`
        <div class="hack-row">
          <div class="hack-name">${t.name}</div>
          <div class="hack-stage-info">Stage ${t.failed||t.completed?"-":i+1}/${s} ${o}</div>
        </div>
        <div class="hack-progress-bar"><div class="${c.join(" ")}" style="width:${n}%;"></div></div>
      `,this.elements.activeHacksList.appendChild(d)}))}updateHackTargets(e){this.elements.hackTargets&&(this.elements.hackTargets.innerHTML="",e.forEach(t=>{const s=document.createElement("div");s.classList.add("target-item");const i=typeof t.cost=="number"?`${t.cost.toFixed(5)} BTC`:"â€”";s.innerHTML=`
        <div class="target-header">
          <span class="target-name">${t.name}</span>
        </div>
        <div class="target-meta">
          <span class="meta-label">DIFFICULTY:</span><span class="meta-value diff-val">${t.difficulty}</span>
          <span class="meta-sep">|</span>
          <span class="meta-label">REWARD:</span><span class="meta-value reward-val">${t.reward.toFixed(4)} BTC</span>
          <span class="meta-sep">|</span>
            <span class="meta-label">COST:</span><span class="meta-value cost-val">${i}</span>
        </div>
        <div class="target-actions">
          <button class="crt-button hack-btn" data-target-id="${t.id}" title="Attempt breach of ${t.name}">HACK</button>
        </div>
      `,this.elements.hackTargets.appendChild(s)}))}updateUpgrades(e){if(!this.elements.upgradesList)return;const t=e.map(s=>`${s.id}:${s.level}:${s.cost}`).join("|");t!==this.lastUpgradesSig&&(this.lastUpgradesSig=t,this.elements.upgradesList.innerHTML="",e.forEach(s=>{const i=this.game.btc>=s.cost,a=document.createElement("div");a.classList.add("software-item"),a.innerHTML=`
        <div class="software-header"><span class="name">${s.name}</span><span class="level">L${s.level}</span></div>
        <div class="software-stats"><div class="power">Cost: ${s.cost} BTC</div></div>
        <div class="software-stats"><div class="power">${s.description}</div></div>
        <button class="crt-button upgrade-btn ${i?"":"disabled"}" data-upgrade-id="${s.id}" data-cost="${s.cost}">UPGRADE</button>
      `,this.elements.upgradesList.appendChild(a)}))}updateNetworkStatus(e){if(!this.elements.networkStatus)return;const t=`${this.game.activeHacks.length}/${this.game.getMaxConcurrentHacks?this.game.getMaxConcurrentHacks():this.game.cpuPower}`;this.elements.networkStatus.innerHTML=`
      <div class="network-info">
        <div>Connections: ${e.connections}</div>
        <div>Bandwidth: ${e.bandwidth} MB/s</div>
        <div>Encryption: ${e.encryption}</div>
        <div>Detection Risk: ${e.detectionRisk}%</div>
        <div>CPU Slots: ${t}</div>
      </div>
    `}updateAnalytics(){if(!this.game)return;const e=this.game.getState();if(this.elements.analytics.completed&&(this.elements.analytics.completed.textContent=e.successfulHacks),this.elements.analytics.failed&&(this.elements.analytics.failed.textContent=e.failedHacks),this.elements.analytics.btcPerMin){const t=this.game.uptime/60||1;this.elements.analytics.btcPerMin.textContent=(e.totalBtc/t).toFixed(4)}this.elements.analytics.risk&&(this.elements.analytics.risk.textContent=`${Math.round(e.riskLevel)}%`),this.elements.analytics.activityList&&e.activityFeed&&(this.elements.analytics.activityList.innerHTML=e.activityFeed.slice(-10).reverse().map(t=>`<div class="activity-line">${new Date(t.t).toLocaleTimeString()} ${t.msg}</div>`).join(""))}updateCodeStream(){if(!this.elements.codeStream)return;const e=[];for(let i=0;i<3;i++)e.push(this.randomCodeLine());const s=this.elements.codeStream.textContent.split(`
`).filter(i=>i.trim().length).concat(e).slice(-60);this.elements.codeStream.textContent=s.join(`
`)}randomCodeLine(){const e=()=>Math.floor(Math.random()*255).toString(16).padStart(2,"0"),t=["SCAN","AUTH","PING","HASH","DECRYPT","TRACE","ROUTE","ALLOC"];return`[${e()}${e()}] ${t[Math.floor(Math.random()*t.length)]} :: ${Math.random().toString(36).slice(2,10)} => ${e()}${e()}:${Math.floor(Math.random()*65535)}`}update(){const e=this.game.getState(),t=document.getElementById("global-btc");t&&(t.textContent=e.btc.toFixed(8));const s=document.getElementById("global-risk");s&&(s.textContent=`${Math.round(e.riskLevel)}%`);const i=document.getElementById("global-active-hacks");i&&(i.textContent=e.activeHacks.length);const a=document.getElementById("global-uptime");a&&(a.textContent=e.uptimeFormatted),this.elements.money&&(this.elements.money.textContent=`${e.btc.toFixed(8)} BTC`),this.elements.reputation&&(this.elements.reputation.textContent=`Rep: ${e.reputation}`),this.elements.uptime&&(this.elements.uptime.textContent=`Uptime: ${e.uptimeFormatted}`),this.elements.cpuUsage&&(this.elements.cpuUsage.textContent=`CPU: ${e.cpuUsage}%`),this.updateProgressBar(this.elements.cpuBar,e.cpuUsage),this.updateProgressBar(this.elements.riskBar,e.riskLevel),this.updateActiveHacks(e.activeHacks),this.updateHackTargets(e.availableTargets),this.updateUpgrades(e.availableUpgrades),this.updateNetworkStatus(e.networkStatus),this.updateResourceStats(e),this.updateResearch(e.research),this.flushGameEvents(),this.updateTraceUI();const n=document.getElementById("cpu-slots-display");n&&(n.textContent=`${this.game.activeHacks.length}/${e.maxConcurrentHacks||this.game.cpuPower}`)}flushGameEvents(){!this.game.recentEvents||!this.game.recentEvents.length||this.game.recentEvents.splice(0).forEach(e=>this.log(e,"system"))}updateResourceStats(e){if(!this.elements.resourceStats)return;const t=this.game.getMiningRate?this.game.getMiningRate():5e-5*this.game.upgrades.mining.level;this.elements.resourceStats.innerHTML=`
      <div class="res-item"><span class="res-label">CPU CORES</span><span class="res-value">${this.game.cpuPower}</span></div>
      <div class="res-item"><span class="res-label">BRUTE LVL</span><span class="res-value">${this.game.upgrades.bruteforce.level}</span></div>
      <div class="res-item"><span class="res-label">ENCRYPT LVL</span><span class="res-value">${this.game.upgrades.encryption.level}</span></div>
      <div class="res-item"><span class="res-label">MINING LVL</span><span class="res-value">${this.game.upgrades.mining.level}</span></div>
      <div class="res-item"><span class="res-label">MINING RATE</span><span class="res-value">${t.toFixed(5)}/s</span></div>
      <div class="res-item"><span class="res-label">BTC</span><span class="res-value">${e.btc.toFixed(4)}</span></div>
      <div class="res-item"><span class="res-label">RISK</span><span class="res-value">${Math.round(e.riskLevel)}%</span></div>
    `}updateResearch(e){if(!e||(this.elements.researchPoints&&(this.elements.researchPoints.textContent=e.points.toFixed(1)),!this.elements.researchList))return;const t=e.available.map(s=>`${s.id}:${s.level}:${s.cost}`).join("|")+`|p:${e.points.toFixed(2)}`;t!==this.lastResearchSig&&(this.lastResearchSig=t,this.elements.researchList.innerHTML="",e.available.forEach(s=>{const i=e.points<s.cost,a=document.createElement("div");a.classList.add("staff-member"),a.innerHTML=`
        <div class="research-name">${s.name} <span class="level">L${s.level}</span></div>
        <div class="research-cost">Cost: ${s.cost} RP</div>
        <button class="crt-button research-btn ${i?"disabled":""}" data-research-id="${s.id}" data-cost="${s.cost}">Research</button>
      `,this.elements.researchList.appendChild(a)}),this._researchDelegated||(this._researchDelegated=!0,this.elements.researchList.addEventListener("click",s=>{const i=s.target.closest(".research-btn");if(!i||this.game.isPaused)return;const a=performance.now();if(a-this.clickCooldowns.research<120)return;this.clickCooldowns.research=a;const n=i.dataset.researchId,o=parseFloat(i.dataset.cost||"0");if(this.game.research.points<o){this.log(`[RESEARCH] Need ${o} RP`,"warning");return}const c=this.game.purchaseResearch(n);this.log(c.message,c.success?"success":"warning"),setTimeout(()=>{this.lastResearchSig="",this.updateResearch(this.game.getState().research)},50)})))}log(e,t="info"){if(!this.elements.log)return;const s=document.createElement("div");let i=t;/^\[RISK\]/.test(e)?i="risk":/^\[TRACE\]/.test(e)?i="trace":/^\[FAIL\]/.test(e)?i="fail":/^\[ACHIEVEMENT\]/.test(e)?i="achievement":/^ERROR:/.test(e)&&(i="error"),s.className=`log-line ${i}`;const a=new Date().toLocaleTimeString();s.textContent=`[${a}] ${e}`,this.elements.log.appendChild(s),this.elements.log.scrollTop=this.elements.log.scrollHeight}updateTraceUI(){if(!this.traceOverlay)return;const e=this.game;if(e.traceEventActive)if(this.injectedTrace){const t=document.getElementById("trace-timer-val");t&&(t.textContent=e.traceEventTimer.toFixed(1))}else{const t=["PURGE LOGS","ROTATE KEYS","FLOOD NOISE"];this.traceOverlay.innerHTML=`
          <div class="trace-panel">
            <div class="trace-title">> TRACE COUNTERMEASURE</div>
            <div class="trace-desc">Active intrusion trace in progress. Select the correct countermeasure before lock completes.</div>
            <div class="trace-options">
              ${t.map(s=>`<button class="trace-btn" data-trace-opt="${s}">${s}</button>`).join("")}
            </div>
            <div class="trace-timer">Time Left: <span id="trace-timer-val">${e.traceEventTimer.toFixed(1)}</span>s</div>
          </div>`,this.traceOverlay.style.display="flex",this.traceOverlay.addEventListener("click",this.onTraceClick),this.injectedTrace=!0}else this.injectedTrace&&(this.traceOverlay.style.display="none",this.traceOverlay.innerHTML="",this.traceOverlay.removeEventListener("click",this.onTraceClick),this.injectedTrace=!1);e.graceActive?(this.graceBanner||(this.graceBanner=document.createElement("div"),this.graceBanner.className="grace-banner",document.body.appendChild(this.graceBanner)),this.graceBanner.textContent=`GRACE WINDOW: ${e.graceTimer.toFixed(1)}s - Lower risk below 80 (${Math.round(e.detectionRisk)}%)`):this.graceBanner&&(this.graceBanner.remove(),this.graceBanner=null)}}const y=new v;new E(y);function k(){const l=document.querySelectorAll(".panel-btn[data-panel]"),e=document.querySelectorAll(".panel");if(l.length===0){console.log("No panel buttons found - using original sidebar structure");return}l.forEach(t=>{t.onclick=()=>{e.forEach(i=>i.classList.remove("active"));const s=document.getElementById("panel-"+t.dataset.panel);s&&s.classList.add("active")}})}function w(){k()}w();
